###########################################################################
# Takes csv created by the program /groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/python_programs/2020/load_1970_2000_sasdata.py
# transoforms and adds data to output format columns
# Writes the data subset to csv for visualisation
# Author: Chirag Jhamb
################################################################################

library(data.table)
library(dplyr)
library(scales)
library(ggplot2)
library(reshape)
library(splitstackshape)
library(sf)
library(stringr)
library(tidyr)

data_file_1970_2000_census <- "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/python_output/2020/20191111_1970_to_2000_county_census.csv"
data_folder_acs_years <- "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/python_output/2020/summary_files_msa/"

get_msa_counties <- function(cbsa_code){ # function to get list of counties in a msa, given its msa_code. Returns unique list of county FIPS
  msa_file = "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/data_definitions/msa_definitions/csa-est2018-alldata.csv"
  msa_data <- read.csv(msa_file)
  msa_cols <- c("CSA","LSAD","STCOU","NAME","CBSA")
  msa_data <- msa_data[msa_cols]
  msa_counties <- subset(msa_data, LSAD=="County or equivalent" & CBSA==cbsa_code)   #subset as per MSA
  return(as.vector(unique(msa_counties$STCOU)))
}

get_county_names_msa <- function(cbsa_code){ # function to get names of counties in a msa, given its msa_code. Returns dataframe having name and code of each county in the msa
  msa_file = "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/data_definitions/msa_definitions/csa-est2018-alldata.csv"
  msa_data <- read.csv(msa_file)
  msa_cols <- c("CSA","LSAD","STCOU","NAME", "CBSA")
  msa_data <- msa_data[msa_cols]
  msa_counties <- subset(msa_data, LSAD=="County or equivalent" & CBSA==cbsa_code)   #subset as per MSA county
  return(msa_counties[c("STCOU","NAME")])
}

get_top_n_msa <- function(top_n = 10){ # function to get names of each msa and its respective CBSA code
  msa_file = "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/data_definitions/msa_definitions/csa-est2018-alldata.csv"
  msa_data <- read.csv(msa_file)
  msa_only <- subset(msa_data, LSAD=="Metropolitan Statistical Area")
  msa_only <- msa_only[order(msa_only$CENSUS2010POP, decreasing=TRUE), ]
  top_10_msa <- head(msa_only,top_n)
  return(top_10_msa[c("CBSA","NAME")])
}

get_top_n_msa_county_level <- function(top_n = 10){ # function to get names of counties in a msa, given its msa_code. Returns dataframe having name and code of each county in the msa
  msa_file = "/groups/brooksgrp/center_for_washington_area_studies/state_of_the_capitol_region/data_definitions/msa_definitions/csa-est2018-alldata.csv"
  msa_data <- read.csv(msa_file)
  # create a DataFrame msa_only having code and name of top 10 MSAs by population
  msa_only <- subset(msa_data, LSAD=="Metropolitan Statistical Area")
  msa_only <- msa_only[order(msa_only$CENSUS2010POP, decreasing=TRUE), ]
  top_10_msa <- head(msa_only,top_n)
  top_10_msa_names <- top_10_msa[c("CBSA","NAME")]
  top_10_msa_cbsa <- as.vector(unique(top_10_msa$CBSA))
  # using the code of top 10 MSAs, create a dataframe of all the counties that are there in those MSAs
  top_10_msa_counties <- msa_data[msa_data$CBSA %in% top_10_msa_cbsa,]
  top_10_msa_counties <- subset(top_10_msa_counties, LSAD=="County or equivalent")
  top_10_msa_counties <- top_10_msa_counties[c("CBSA","NAME","LSAD","STCOU")]
  # merge the county dataframe with MSA dataframe, having one row per county and a column mentioning MSA name
  names(top_10_msa_names)[names(top_10_msa_names) == 'NAME'] <- 'msa_name'  # rename before merge
  top_10_msa <- merge(top_10_msa_counties, top_10_msa_names, by="CBSA",all = TRUE)
  names(top_10_msa)[names(top_10_msa) == 'STCOU'] <- 'FIPS'  # standard name across datasets
  names(top_10_msa)[names(top_10_msa) == 'NAME'] <- 'county_name'  # standard name across datasets
  return(top_10_msa)
}

reformat_acs_data <- function(df){
  data <- as.data.frame(t(df))
  # remove unnecessary columns
  data <- data[-c(1,2),]
  # reassign the column names in transposed df with the indexes
  colnames(data) <- df$index
  # print the df to check if the format is appropriate
  # print(head(data))
  # rename the columns to avoid column duplicates error
  colnames(data) <- make.unique(names(data))
  #names of columns in data frame
  cols <- colnames(data)
  # character variables
  cols.char <- c("FILEID","FILETYPE","STATE","GEO_NAME","GEO_ID")
  #numeric variables
  cols_num <- cols[!cols %in% cols.char]
  # write a function to convert the required columns to numeric
  make_num <- function(x)
  {
    return(as.numeric(as.character(x)))
  }
  cols_num_unique <- cols_num
  subset_cols <- c(cols_num_unique,cols.char)
  data_sub <- data[subset_cols]
  # make all the required columns numeric
  data_sub[cols_num_unique] <- lapply(data_sub[cols_num_unique],make_num)
  # create column state country code
  data_sub["state_county_code"] <- rownames(data_sub)
  # split the column GEO NAME to extract county and state name
  data_sub <- as.data.frame(cSplit(data_sub,c("GEO_NAME"),',',drop = F))
  # split the column country code to get state and county codes
  data <- as.data.frame(cSplit(data_sub,c("state_county_code"),'_',drop = F,type.convert = FALSE))
  # rename the splitted columns
  names(data)[names(data)=="GEO_NAME_1"] <- "county_name"
  names(data)[names(data)=="GEO_NAME_2"] <- "state_name"
  names(data)[names(data)=="state_county_code_1"] <- "state_code"
  names(data)[names(data)=="state_county_code_2"] <- "county_code"
  data$FILETYPE <- as.character(data$FILETYPE)
  # get the year column
  data <- data %>% mutate(year=substr(FILETYPE,1,4))
  data$FIPS <- paste(data$STATE_FIPS,data$county_code, sep="")
  return(data)
}

reformat_acs_household_size_subset <- function(data) {
  data <- data %>% mutate('household_size_1'=select(.,matches('B11016_10_1-person_household')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('household_size_2'=select(.,matches('B11016_3_2-person_household|B11016_11_2-person_household')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('household_size_3_to_4'=select(.,matches('B11016_12_3-person_household|B11016_13_4-person_household|B11016_5_4-person_household|B11016_4_3-person_household')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('household_size_more_than_4'=select(.,matches('B11016_14_5-person_household|B11016_15_6-person_household|B11016_16_7-or-more_person_household|B11016_6_5-person_household|B11016_7_6-person_household|B11016_8_7-or-more_person_household')) %>% apply(1, sum, na.rm=TRUE))
  return(data)
}

reformat_acs_age_subset <- function(data) {
  data <- data %>% mutate('less_than_18'=
                     select(.,matches('under_5_years|5_to_9_years|10_to_14_years|15_to_17_years$')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('18_to_29'=
      select(.,matches('18_and_19_years|20_years|21_years|22_to_24_years|25_to_29_years$')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('30_to_44'=
      select(.,matches('30_to_34_years|35_to_39_years|40_to_44_years$')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('45_to_59'=
                   select(.,matches('45_to_49_years|50_to_54_years|55_to_59_years$')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('above_59'=
                select(.,matches('60_and_61_years|62_to_64_years|65_and_66_years|67_to_69_years|70_to_74_years|75_to_79_years|80_to_84_years|85_years_and_over$')) %>% apply(1, sum, na.rm=TRUE))
  colnames(data)[which(colnames(data) == "B01001_1_total")] <- 'total_population'
  return(data)
}

reformat_acs_race_subset <- function(data) {
  data <- data %>% mutate(year=substr(FILETYPE,1,4))
  data <- data %>% mutate('white_alone'=
                     select(.,matches('B03002_3_white_alone|B03002_13_white_alone$')) %>% apply(1, sum, na.rm=TRUE))
  data <- data %>% mutate('AA_alone'=
      select(.,matches('B03002_4_black_or_african_american_alone|B03002_14_black_or_african_american_alone$')) %>% apply(1, sum, na.rm=TRUE))
  colnames(data)[which(colnames(data) == "B03002_12_hispanic_or_latino")] <- 'hispanic_or_latino'
  return(data)
}

reformat_1970_2000_data <- function(data){
  # data <- read.csv(input_file)
  # year 1970:
  data_1970 <- subset(data, year=="1970")
  # age 1970 columns:
  data_1970 <- data_1970 %>% mutate('less_than_18'=
                     select(.,matches('m17_6|m17_33|m17_7|m17_34|m17_8|m17_35|m17_9|m17_36|m17_10|m17_37|m17_5|m17_32|m17_1|m17_28|m17_4|m17_31|m17_2|m17_29|m17_3|m17_30$')) %>% apply(1, sum, na.rm=TRUE))
  data_1970 <- data_1970 %>% mutate('18_to_29'=
      select(.,matches('m17_11|m17_38|m17_12|m17_39|m17_13|m17_40|m17_14|m17_41|m17_15|m17_42|m17_16|m17_43$')) %>% apply(1, sum, na.rm=TRUE))
  data_1970 <- data_1970 %>% mutate('30_to_44'=
      select(.,matches('m17_17|m17_44|m17_18|m17_45|m17_19|m17_46$')) %>% apply(1, sum, na.rm=TRUE))
  data_1970 <- data_1970 %>% mutate('45_to_59'=
                   select(.,matches('m17_20|m17_47|m17_21|m17_48|m17_22|m17_49$')) %>% apply(1, sum, na.rm=TRUE))
  data_1970 <- data_1970 %>% mutate('above_59'=
                select(.,matches('m17_23|m17_50|m17_24|m17_51|m17_25|m17_52|m17_26|m17_53|m17_27|m17_54$')) %>% apply(1, sum, na.rm=TRUE))
  data_1970 <- data_1970 %>% mutate('total_population'=
                select(.,matches('less_than_18|18_to_29|30_to_44|45_to_59|above_59')) %>% apply(1, sum, na.rm=TRUE))
  # year 1980:
  data_1980 <- subset(data, year=="1980")
  # age 1980 columns:
  data_1980 <- data_1980 %>% mutate('less_than_18'=
      select(.,matches('t15_1|t15_2|t15_3|t15_4|t15_5|t15_6|t15_7|t15_8|t15_9|t15_10|t15_11|t15_12|t15_27|t15_28|t15_29|t15_30|t15_31|t15_32|t15_33|t15_34|t15_35|t15_36|t15_37|t15_38$')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('18_to_29'=
      select(.,matches('t15_13|t15_14|t15_15|t15_16|t15_39|t15_40|t15_41|t15_42')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('30_to_44'=
      select(.,matches('t15_17|t15_18|t15_43|t15_44')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('45_to_59'=
      select(.,matches('t15_19|t15_20|t15_45|t15_46')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('above_59'=
      select(.,matches('t15_21|t15_22|t15_23|t15_24|t15_25|t15_26|t15_47|t15_48|t15_49|t15_50|t15_51|t15_52$')) %>% apply(1, sum, na.rm=TRUE))
  # race 1980 columns
  data_1980 <- data_1980 %>% mutate('white_alone'=
      select(.,matches('t12_1|t14_2')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('AA_alone'=
      select(.,matches('t12_2|t14_3')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('hispanic_or_latino'=
      select(.,matches('t14_1')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('total_population'=
    select(.,matches('t12_1|t12_2|t12_3|t12_4|t12_5|t12_6|t12_7|t12_8|t12_9|t12_10|t12_11|t12_12|t12_13|t12_14|t12_15|t12_16|t12_17$')) %>% apply(1, sum, na.rm=TRUE))
  # household type 1980 columns
  data_1980 <- data_1980 %>% mutate('household_with_kids'=
      select(.,matches('t20_1|t20_3|t20_5')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('family_household_without_kids'=
      select(.,matches('t20_2|t20_4|t20_6')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('non_family_household_without_kids'=
      select(.,matches('t20_7')) %>% apply(1, sum, na.rm=TRUE))
  #household size columns:
  data_1980 <- data_1980 %>% mutate('household_size_1'=
      select(.,matches('t18_1')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('household_size_2'=
      select(.,matches('t18_2')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('household_size_3_to_4'=
      select(.,matches('t18_4|t18_3')) %>% apply(1, sum, na.rm=TRUE))
  data_1980 <- data_1980 %>% mutate('household_size_more_than_4'=
      select(.,matches('t18_5|t18_6')) %>% apply(1, sum, na.rm=TRUE))
  # year 1990:
  data_1990 <- subset(data, year=="1990")
  # age 1990 columns:
  data_1990 <- data_1990 %>% mutate('less_than_18'=
      select(.,matches('P13_1|P13_2|P13_3|P13_4|P13_5|P13_6|P13_7|P13_8|P13_9|P13_10|P13_11|P13_12')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('18_to_29'=
      select(.,matches('P13_13|P13_14|P13_15|P13_16|P13_17|P13_18')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('30_to_44'=
      select(.,matches('P13_19|P13_20|P13_21')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('45_to_59'=
      select(.,matches('P13_22|P13_23|P13_24')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('above_59'=
      select(.,matches('P13_25|P13_26|P13_27|P13_28|P13_29|P13_30|P13_31')) %>% apply(1, sum, na.rm=TRUE))
  # race 1990 columns
  data_1990 <- data_1990 %>% mutate('white_alone'=
      select(.,matches('P12_11|P12_21')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('AA_alone'=
      select(.,matches('P12_12|P12_22')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('hispanic_or_latino'=
      select(.,matches('P12_15|P12_21|P12_22|P12_23|P12_24|P12_25')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('total_population'=
      select(.,matches('P12_11|P12_12|P12_13|P12_14|P12_15|P12_21|P12_22|P12_23|P12_24|P12_25')) %>% apply(1, sum, na.rm=TRUE))
  # household type 1990 columns
  data_1990 <- data_1990 %>% mutate('household_with_kids'=
      select(.,matches('P19_1|P19_3|P19_5$')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('family_household_without_kids'=
      select(.,matches('P19_2|P19_4|P19_6$')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('non_family_household_without_kids'=
      select(.,matches('P19_7')) %>% apply(1, sum, na.rm=TRUE))
  #household size columns:
  data_1990 <- data_1990 %>% mutate('household_size_1'=
      select(.,matches('P16_1')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('household_size_2'=
      select(.,matches('P16_2')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('household_size_3_to_4'=
      select(.,matches('P16_3|P16_4')) %>% apply(1, sum, na.rm=TRUE))
  data_1990 <- data_1990 %>% mutate('household_size_more_than_4'=
      select(.,matches('P16_5|P16_6|P16_7')) %>% apply(1, sum, na.rm=TRUE))
  # year 2000:
  data_2000 <- subset(data, year=="2000")
  # age 2000 columns:
  data_2000 <- data_2000 %>% mutate('less_than_18'=
      select(.,matches('P8_3|P8_4|P8_5|P8_6|P8_7|P8_8|P8_9|P8_10|P8_11|P8_12|P8_13|P8_14|P8_15|P8_16|P8_17|P8_18|P8_19|P8_20|P8_42|P8_43|P8_44|P8_45|P8_46|P8_47|P8_48|P8_49|P8_50|P8_51|P8_52|P8_53|P8_54|P8_55|P8_56|P8_57|P8_58|P8_59')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('18_to_29'=
      select(.,matches('P8_21|P8_22|P8_23|P8_24|P8_25|P8_26|P8_60|P8_61|P8_62|P8_63|P8_64|P8_65')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('30_to_44'=
      select(.,matches('P8_27|P8_28|P8_29|P8_66|P8_67|P8_68')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('45_to_59'=
      select(.,matches('P8_30|P8_31|P8_32|P8_69|P8_70|P8_71')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('above_59'=
      select(.,matches('P8_33|P8_34|P8_35|P8_36|P8_37|P8_38|P8_39|P8_72|P8_73|P8_74|P8_75|P8_76|P8_77|P8_78')) %>% apply(1, sum, na.rm=TRUE))
  # race 2000 columns
  data_2000 <- data_2000 %>% mutate('white_alone'=
      select(.,matches('P7_3|P7_11')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('AA_alone'=
      select(.,matches('P7_4|P7_12')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('hispanic_or_latino'=
      select(.,matches('P7_10')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('total_population'=
      select(.,matches('P7_1')) %>% apply(1, sum, na.rm=TRUE))
  # household type 2000 columns
  data_2000 <- data_2000 %>% mutate('household_with_kids'=
      select(.,matches('P10_8|P10_12|P10_15')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('family_household_without_kids'=
      select(.,matches('P10_9|P10_13|P10_16')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('non_family_household_without_kids'=
      select(.,matches('P10_2|P10_17')) %>% apply(1, sum, na.rm=TRUE))
  #household size columns:
  data_2000 <- data_2000 %>% mutate('household_size_1'=
      select(.,matches('P14_10')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('household_size_2'=
      select(.,matches('P14_11|P14_3')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('household_size_3_to_4'=
      select(.,matches('P14_12|P14_13|P14_5|P14_6')) %>% apply(1, sum, na.rm=TRUE))
  data_2000 <- data_2000 %>% mutate('household_size_more_than_4'=
      select(.,matches('P14_6|P14_7|P14_8|P14_14|P14_15|P14_16')) %>% apply(1, sum, na.rm=TRUE))
  columns_subset <- c('FIPS', 'year','less_than_18', '18_to_29', '30_to_44', '45_to_59', 'above_59', "total_population")
  data_1970 <- data_1970[columns_subset]  # limited data for 1970
  # add more columns/categories for years after 1970:
  columns_subset <- c(columns_subset, "household_size_1", "household_size_2", "household_size_3_to_4", "household_size_more_than_4",   "white_alone", "AA_alone", "hispanic_or_latino")
  # columns_subset <- c(columns_subset, "household_size_1", "household_size_2", "household_size_3_to_4", "household_size_more_than_4", "household_with_kids", "family_household_without_kids", "non_family_household_without_kids", "white_alone", "AA_alone", "hispanic_or_latino")
  # get the required columns
  data_1980 <- data_1980[columns_subset]
  data_1990 <- data_1990[columns_subset]
  data_2000 <- data_2000[columns_subset]
  # bind all years data and return
  data_1970_to_2000 <- rbindlist(list(data_2000, data_1990, data_1980, data_1970), fill=TRUE)  # set fill=true to fill empty columns of data_1970
  return(data_1970_to_2000)
}

make_county_msa_level_data <- function(df){
  top_10_msa <- get_top_n_msa()
  dmv_subset <- df[df$FIPS %in% as.character(get_msa_counties(47900)),]
  dmv_subset$level <- "county_level"
  msa_counties <- c()
  for (i in unique(top_10_msa$CBSA)){
    msa_counties <- c(msa_counties,get_msa_counties(i))
  }
  # msa_county_data <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("msa_code", "FIPS", "msa_name"))
  # msa_counties <- list()
  # for (j in top_10_msa$CBSA){
  #   msa_counties <- get_county_names_msa(j)
  #   for(i in 1:nrow(msa_counties)){
  #     msa_county_data <- rbind(msa_county_data,c(j, msa_counties[i, "STCOU"], msa_counties[i, "NAME"]))
  #   }
  # }

}

top_10_msa <- get_top_n_msa()
top_10_msa_county_codes <- as.vector(top_10_msa$FIPS)  # lust of counties that will be needed

# read 1970 to 2000 data:
data_1970_to_2000 <- read.csv(data_file_1970_2000_census)
# get only the counties which are in the top 10 MSAs
data_1970_to_2000 <- data_1970_to_2000[data_1970_to_2000$FIPS %in% top_10_msa_county_codes,]
#convert data to required columns:
data_1970_to_2000 <- reformat_1970_2000_data(data_1970_to_2000)
# add MSA name to data:
data_1970_to_2000 <- merge(data_1970_to_2000, top_10_msa, by="FIPS")

# get list of all files having acs years, present in the path data_folder_acs_years. Stack them together
acs_files <- list.files(path = data_folder_acs_years, pattern = "20191202*", full.names = TRUE)
dfn <- data.frame()
for (i in acs_files){
  acs_data <- read.csv(i)
  acs_data <- reformat_acs_data(acs_data)
  print(dim(acs_data))
  acs_data$MSA <- strsplit(i,"_")[[1]][16]  # take msa from the filename
  dfn <- dplyr::bind_rows(dfn, acs_data)#rbind(dfn, acs_data)
}

house_cols <- c("household_size_1", "household_size_2", "household_size_3_to_4", "household_size_more_than_4")
race_cols <- c("white_alone","AA_alone","hispanic_or_latino", "total_population")
age_cols <- c("less_than_18", "18_to_29","30_to_44","45_to_59","above_59")
to_add_cols <- c(age_cols, race_cols, house_cols)
all_cols <- c(to_add_cols, "FIPS", "year", "MSA")

#read acs years data:
data_acs_years <- read.csv(data_file_acs_years)
data_acs_years <- reformat_acs_data(data_acs_years)



# cols_to_be_added <- c('less_than_18', '18_to_29', '30_to_44', '45_to_59', 'above_59', "total_population","household_size_1", "household_size_2", "household_size_3_to_4", "household_size_more_than_4", "household_with_kids", "family_household_without_kids", "non_family_household_without_kids", "white_alone", "AA_alone", "hispanic_or_latino")
cols_to_be_added <- c('less_than_18', '18_to_29', '30_to_44', '45_to_59', 'above_59', "total_population","household_size_1", "household_size_2", "household_size_3_to_4", "household_size_more_than_4", "white_alone", "AA_alone", "hispanic_or_latino")
sum_by <- c("MSA","year")
slct <- c(sum_by,cols_to_be_added)
added_msa <- data_1970_to_2000 %>%group_by(.dots=sum_by) %>%summarise_each(funs(sum))

total_pop_df <- dfn5 %>% group_by(CBSA, year) %>% summarise(total_population = sum(total_population)

for (k in all_cols){
  print(k)
  df_temp <- dfn5 %>% group_by(CBSA, year) %>% summarise(tempo = sum(!!sym(k)))
  colnames(df_temp)[which(colnames(df_temp) == "tempo")] <- k
  total_pop_df <- merge(total_pop_df, df_temp, all.x=TRUE)
}
